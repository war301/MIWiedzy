import numpy as np
def wyznacznik(A):
    wynik=0
    indeksy=list(range(len(A)))

    if(len(indeksy)==2):
        return A[0][0]*A[1][1]-A[0][1]*A[1][0]
    else:
        for ind in indeksy:
            ac=A.copy()
            ac=ac[1:0]
            height=len(ac)
            for i in range(height):
                
                ac[i]=ac[i][0:ind]+ac[i][ind+1:]

            znak=(-1)**(ind%2)
            podmacierz = wyznacznik(ac)
            wynik+=znak*podmacierz*A[0][ind]    
    return wynik

test1=[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
test2=[[1,2,3,4,1],[8,5,6,7,2],[9,12,10,11,3],[13,14,16,15,4],[10,8,6,4,2]]
A=[[-2,2,-3],[-1,5,3],[2,0,-1]]
print(wyznacznik(A))  
print("to",np.linalg.det(A))
print(wyznacznik(test1)) 
print("to",np.linalg.det(test1))   
print(wyznacznik(test2))    
print("to",np.linalg.det(test2))  

def determinant_recursive(A, total=0):
    # Section 1: store indices in list for row referencing
    indices = list(range(len(A)))
     
    # Section 2: when at 2x2 submatrices recursive calls end
    if len(A) == 2 and len(A[0]) == 2:
        val = A[0][0] * A[1][1] - A[1][0] * A[0][1]
        return val
 
    # Section 3: define submatrix for focus column and 
    #      call this function
    for fc in indices: # A) for each focus column, ...
        # find the submatrix ...
        As = copy_matrix(A) # B) make a copy, and ...
        As = As[1:] # ... C) remove the first row
        height = len(As) # D) 
 
        for i in range(height): 
            # E) for each remaining row of submatrix ...
            #     remove the focus column elements
            As[i] = As[i][0:fc] + As[i][fc+1:] 
 
        sign = (-1) ** (fc % 2) # F) 
        # G) pass submatrix recursively
        sub_det = determinant_recursive(As)
        # H) total all returns from recursion
        total += sign * A[0][fc] * sub_det 
 
    return total
